Métodos de strings.
--------------------

.lengt --> Devuelve el largo.

.slice(inicio, fin) --> Extrae desde posición inicio a fin los caracteres / Se puede omitir el fin / Si un parámetro es negativo, la posición se cuenta desde el final de la cadena.

.substring(inicio, longitudExtraída) --> substr()es similar a slice(). La diferencia es que el segundo parámetro especifica la longitud extraída. / Los valores iniciales y finales inferiores a 0 se tratan como 0.

.replace(palabra, palabraAReemplazar) --> método reemplaza un valor especificado (solo la primera coincidencia) con otro valor en una cadena, distingue entre mayúsculas y minúsculas.

.toUpperCase() .toLowerCase() --> Conversión a mayúsculas y minúsculas.

.trim() --> Quita los espacios en blanco del inicio y final.

.toString() --> Convierte un núm en texto.


Métodos de números.
--------------------
parseInt() --> analiza una cadena y devuelve un número entero. Se permiten espacios. Solo se devuelve el primer número.
parseFloat() --> analiza una cadena y devuelve un número (acepta decimales). Se permiten espacios. Solo se devuelve el primer número.

Math --> El objeto JavaScript Math le permite realizar tareas matemáticas en números.
Math.round(x) --> devuelve el valor de x redondeado al entero más cercano.
Math.floor(x) --> devuelve el valor de x redondeado hacia abajo a su entero más cercano.
Math.min(lista) y Math.max(lista) --> se puede usar para encontrar el valor más bajo o más alto en una lista de argumentos.
Math.random() --> devuelve un número aleatorio entre 0 (inclusive) y 1 (exclusivo).

Combinar 2 metodos:
Math.floor(Math.random() * 10); --> Devuelve un entero random entre 0 y 9.


Arrays.
-----------------------
Un par de [] representa un arreglo/array, los elementos se separan por ,
La posición de un elemento en el arreglo es conocido como indice.
El número de elementos en el arreglo determina su longitud


const salad = ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];


Se puede crear con un constructor --> const salad = new Array('🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑');


Acceder a un elemento --> const element = array[index];
ej: const salad = ['🍅', '🍄', '🥦', '🥒', '🌽', '🥕', '🥑'];
    salad[0]; // '🍅'
    salad[2]; // '🥦'
    salad[5]; // '🥕'

.lenght() --> para saber la longitud.
.push() --> añade un elemento al final.
.unshift() --> añade un elemento al comienzo.
.pop() --> elimina un elemento del final.
.shift() --> elimina un elemento del comienzo.
.concat() --> merge de 2 arrays.
.join() --> junta todos los elementos de un arreglo usando un separador y regresa una cadena. Separador default ,
.includes() --> Si incluye el elemento return true, sino false.
.sort() --> Convierte los tipos de elemento  en cadena y luego los arregla. El orden de clasificación predeterminado es ascendente. El método sort () cambia la matriz original.
.splice(position, elemABorrar, elemAAñadir) --> Añade un elemento, necesitamos pasar la posición donde queremos añadir,  cuantos elementos a borrar empezando con la posición, y con el elemento a añadir


Otros que veremos más adelante:
Para iterar Arreglos.


.filter() ---> Crea un nuevo array con todos los elementos que cumplan la condición implementada por la función dada.

const productos = ['Notebook', 'Auriculares con cable', 'Mouse', 'Teclado', 'Mouse inahalambrico', 'Teclado Mecánico', 'Auriculares inahalambricos' ]

const mouse = productos.filter(mouse => mouse === 'Mouse');





.map() --> Crea un nuevo array con los resultados de la llamada a la función indicada aplicados a cada uno de sus elementos.

const edades = [10, 20, 25, 15, 18, 30, 12, 56, 17]

const condicion = edades.map(edad => {
    if(edad >= 18){
        return "Mayor de edad";
    }else {
        return "Menor de edad";
    }
})




.find() ---> Devuelve el primer elemento del array que cumple la función de prueba proporcionada (Solo 1). si no encuentra nada return undefined.

const notebook = productos.find(note => note === 'Notebook')





.reduce() -->  Ejecuta una función reductora sobre cada elemento de un array, devolviendo como resultado un único valor.

array.reduce((valorAnterior, valorActual, indice, array) => {
  return valorAnterior + valorActual;
}, valorInicial);

const notas = [10, 6, 5, 3, 9, 7]
notas.reduce((nota1, nota2) => nota1 + nota2)





.some() --> Comprueba si al menos un elemento del array cumple con la condición implementada por la función proporcionada.

const notas = [10, 6, 5, 3, 9, 7]
notas.some(nota => nota > 5)





.every() --> Determina si todos los elementos en el array cumplen una condición.
const notas = [10, 6, 5, 3, 9, 7]
notas.every(nota => nota > 5)